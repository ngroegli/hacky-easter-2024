import math
from decimal import Decimal


def egcd(a, b):
    if a == 0:
        return b, 0, 1
    else:
        gcd, x, y = egcd(b % a, a)
        return gcd, y - (b // a) * x, x


def find_phi(e, d):
    # Solve for phi using the modular inverse of e modulo d
    _, x, _ = egcd(e, d)
    return x % d

'''
def find_phi(e, d):
    phi = 1
    while True:
        if phi % 10000000000 == 0:
            print("Amount of tested phi's: {0}".format(phi))
        try:
            if pow(e, -1, phi) == d:
                return phi
            phi += 1
        except:
            phi += 1
'''

def solve_for_p(h1, h2):
    # Calculate the coefficients of the quadratic equation
    a = Decimal(1)
    b = Decimal(-(h1 + h2))
    c = Decimal(h1)
    
    # Calculate the discriminant
    discriminant = Decimal(b**2 - 4*a*c)
    
    # Check if the discriminant is non-negative
    if discriminant < 0:
        print("No real solutions exist.")
        return None
    
    # Calculate the two possible solutions for p
    p1 = Decimal((-b + Decimal(math.sqrt(discriminant))) / (2*a))
    p2 = Decimal((-b - Decimal(math.sqrt(discriminant))) / (2*a))
    
    return p1, p2


def main():
    e = 65537
    d = 108558249913654912965940302330463677659522327849752040249154983537931376711447753446078750459585068929061255563115321514107583357553375511879499468302459674778888941298684123550665943662956973368472434636899177211390575049269298954055740191242891907815891881074808494461835202709340654804790036874512758297194884778457538655665389842207203276000134877032836449478050322547852636564447336587949060158710830910425415789299719726199747636954120947724281386286626712561093374518507186661634721441026468041965091952487426455334066534862315923969845098027755755254715248428307745802890502029004449910036589111577136508145
    h1 = Decimal(17061347780794249474937241232210067248853992326832612618246691021883473946134655677687441412157857703606444858129229798729181511999941417079248816916398800254158380205975686822877683332947748593883879973137797066913439129505904185975901786363274357224292820647481353241115812182163209817605574692194107051614650879245007286513127155460653132782119052901592516408114681455884212579226838379050354351979274017290886704282949858854855220545880052711872903284127358620618442660935241175277762438290440049748381402411449900120675924310471041887374487007916064485523648828943063195915214058020064461558868092911435089696088)
    h2 = Decimal(17061347780794249474937241232210067248853992326832612618246691021883473946134655677687441412157857703606444858129229798729181511999941417079248816916398800254158380205975686822877683332947748593883879973137797066913439129505904185975901786363274357224292820647481353241115812182163209817605574692194107051614682608366033433427655544056745556231593264049326018746703896654050234167841676926759637292807314933999966217282511228601089336295804775690349998659758021221369291834448080631738623473608907605109479463903233113943877434062712654852684276670025876108200973499112716384186485697596614301411957746226430962874694)

    phi = find_phi(e, d)
    print("phi:", phi)

    #p1, p2 = solve_for_p(h1, h2)
    #print("Possible solutions for p:", p1, p2)


if __name__ == "__main__":
    main()